version: '3.7'
services:

  ## PostgreSQL Docker Compose Config
  postgres-user:
    container_name: postgres-user
    image: postgres
    environment:
      POSTGRES_DB: user-service
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-user:/data/postgres
    ports:
      - "5001:5001"
    expose:
      - "5001"
    command: -p 5001
    restart: always

  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    ports:
      - "5002:5002"
    expose:
      - "5002"
    command: -p 5002
    restart: always

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory:/data/postgres
    ports:
      - "5003:5003"
    expose:
      - "5003"
    command: -p 5003
    restart: always

  postgres-chart:
    container_name: postgres-chart
    image: postgres
    environment:
      POSTGRES_DB: chart-service
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-chart:/data/postgres
    ports:
      - "5004:5004"
    expose:
      - "5004"
    command: -p 5004
    restart: always

  postgres-payment:
    container_name: postgres-payment
    image: postgres
    environment:
      POSTGRES_DB: payment-service
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-payment:/data/postgres
    ports:
      - "5005:5005"
    expose:
      - "5005"
    command: -p 5005
    restart: always

  postgres-sonar:
    container_name: postgres-sonar
    image: postgres
    profiles: ["sonar"]
    environment:
      POSTGRES_DB: postgres-sonar
      POSTGRES_USER: taltech
      POSTGRES_PASSWORD: ecommerce
      PGDATA: /data/postgres
    volumes:
      - ./postgres-sonar:/data/postgres
    ports:
      - "5100:5100"
    expose:
      - "5100"
    command: -p 5100
    restart: always

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    expose:
      - "8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  ## Kafka zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ## Kafka broker
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    expose:
      - "9411"

  ## Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    expose:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  ## Grafana
  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - "3000:3000"
    expose:
      - "3000"

  ## Sonarqube
  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    depends_on:
      - postgres-sonar
    profiles: ["sonar"]
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres-sonar:5100/postgres-sonar
      SONAR_JDBC_USERNAME: taltech
      SONAR_JDBC_PASSWORD: ecommerce
    volumes:
      - ./opt/sonarCE/data:/opt/sonarqube/data
      - ./opt/sonarCE/extentions:/opt/sonarqube/extensions
      - ./opt/sonarCE/logs/:/opt/sonarqube/logs
    ports:
      - "9000:9000"

  ## E-Commerce Microservices
  ## Eureka Server
  discovery-server:
    image: taltech-ecommerce/discovery-server:latest
    profiles: ["services"]
    container_name: discovery-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    ports:
      - "8761:8761"
    expose:
      - "8761"

  ## API Gateway
  api-gateway:
    image: taltech-ecommerce/api-gateway:latest
    container_name: api-gateway
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
    ports:
      - "8181:8080"
    expose:
      - "8181"

  ## User Service Docker Compose Config
  user-service:
    container_name: user-service
    image: taltech-ecommerce/user-service:latest
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-order
      - zipkin
      - discovery-server
      - api-gateway
    ports:
      - "7001:8080"
    expose:
      - "7001"

  ## Order Service Docker Compose Config
  order-service:
    container_name: order-service
    image: taltech-ecommerce/order-service:latest
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-order
      - zipkin
      - discovery-server
      - api-gateway
    ports:
      - "7002:8080"
    expose:
      - "7002"

  ## Inventory Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: taltech-ecommerce/inventory-service:latest
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway
    ports:
      - "7003:8080"
    expose:
      - "7003"

  ## Chart Service Docker Compose Config
  chart-service:
    container_name: chart-service
    image: taltech-ecommerce/chart-service:latest
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-chart
      - discovery-server
      - api-gateway
    ports:
      - "7004:8080"
    expose:
      - "7004"

  ## Payment Service Docker Compose Config
  payment-service:
    container_name: payment-service
    image: taltech-ecommerce/payment-service:latest
    profiles: ["services"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-payment
      - discovery-server
      - api-gateway
    ports:
      - "7005:8080"
    expose:
      - "7005"
